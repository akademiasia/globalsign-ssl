<?php

use PHPUnit\Framework\TestCase;
use Detain\MyAdminGlobalSign\GlobalSign;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-26 at 07:21:00.
 */
class GlobalSignTest extends TestCase {
	/**
	 * @var GlobalSign
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		if (file_exists(__DIR__.'/.env')) {
			$dotenv = new Dotenv\Dotenv(__DIR__);
			$dotenv->load();
		}
		$this->object = new GlobalSign(getenv('GLOBALSIGN_USERNAME'), getenv('GLOBALSIGN_PASSWORD'));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @covers GlobalSign::GetOrderByOrderID
	 * @todo   Implement testGetOrderByOrderID().
	 */
	public function testGetOrderByOrderID() {
		$this->markTestIncomplete('This test has not been implemented yet.');
		$response = $this->object->GetOrderByOrderID('CE201011028514');
		$this->assertArrayKeyExists('Response', $response);
		$this->ArrayKeyExists('QueryResponseHeader', $response['Response']);
		$this->ArrayKeyExists('SuccessCode', $response['Response']['QueryResponseHeader']);
		$this->assertEquals($response['Response']['QueryResponseHeader']['SuccessCode'], 0);
		$this->ArrayKeyExists('SearchOrderDetails', $response['Response']);
		$this->assertTrue(is_array($response['Response']['SearchOrderDetails']['SearchOrderDetail']));
		$this->assertArrayHasKey(0, $response['Response']['SearchOrderDetails']['SearchOrderDetail']);
		$this->ArrayKeyExists('OrderID', $response['Response']['SearchOrderDetails']['SearchOrderDetail'][0]);
		$this->ArrayKeyExists('OrderKind', $response['Response']['SearchOrderDetails']['SearchOrderDetail'][0]);
		$this->ArrayKeyExists('OrderStatus', $response['Response']['SearchOrderDetails']['SearchOrderDetail'][0]);
		$this->ArrayKeyExists('FQDN', $response['Response']['SearchOrderDetails']['SearchOrderDetail'][0]);
		$this->assertTrue(strpos($response['Response']['SearchOrderDetails']['SearchOrderDetail'][0]['FQDN'], 'interserver.net') !== FALSE);
	}

	/**
	 * @covers GlobalSign::GetOrderByDataRange
	 * @todo   Implement testGetOrderByDataRange().
	 */
	public function testGetOrderByDataRange() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::GetCertificateOrders
	 * @todo   Implement testGetCertificateOrders().
	 */
	public function testGetCertificateOrders() {
		$response = $this->object->GetCertificateOrders('2017-11-24T00:00:01.000-05:00', '2017-11-24T23:23:59.000-05:00');
		$this->assertObjectHasAttribute('Response', $response);
		$this->assertObjectHasAttribute('QueryResponseHeader', $response->Response);
		$this->assertObjectHasAttribute('SuccessCode', $response->Response->QueryResponseHeader);
		//var_export($response);
		$this->assertEquals(0, $response->Response->QueryResponseHeader->SuccessCode);
		$this->assertObjectHasAttribute('SearchOrderDetails', $response->Response);
		$response = $this->object->GetCertificateOrders('', '', 'interserver.net');
		$this->assertObjectHasAttribute('Response', $response);
		$this->assertObjectHasAttribute('QueryResponseHeader', $response->Response);
		$this->assertObjectHasAttribute('SuccessCode', $response->Response->QueryResponseHeader);
		$this->assertEquals($response->Response->QueryResponseHeader->SuccessCode, 0);
		$this->assertObjectHasAttribute('SearchOrderDetails', $response->Response);
		$this->assertTrue(is_array($response->Response->SearchOrderDetails->SearchOrderDetail));
		$this->assertArrayHasKey(0, $response->Response->SearchOrderDetails->SearchOrderDetail);
		$this->assertObjectHasAttribute('OrderID', $response->Response->SearchOrderDetails->SearchOrderDetail[0]);
		$this->assertObjectHasAttribute('OrderKind', $response->Response->SearchOrderDetails->SearchOrderDetail[0]);
		$this->assertObjectHasAttribute('OrderStatus', $response->Response->SearchOrderDetails->SearchOrderDetail[0]);
		$this->assertObjectHasAttribute('FQDN', $response->Response->SearchOrderDetails->SearchOrderDetail[0]);
		$this->assertTrue(strpos($response->Response->SearchOrderDetails->SearchOrderDetail[0]->FQDN, 'interserver.net') !== FALSE);
		$response = $this->object->GetCertificateOrders('', '', '', '3');
		$this->assertObjectHasAttribute('Response', $response);
		$this->assertObjectHasAttribute('QueryResponseHeader', $response->Response);
		$this->assertObjectHasAttribute('SuccessCode', $response->Response->QueryResponseHeader);
		$this->assertEquals($response->Response->QueryResponseHeader->SuccessCode, 0);
		$this->assertObjectHasAttribute('SearchOrderDetails', $response->Response);
		$this->assertTrue(is_array($response->Response->SearchOrderDetails->SearchOrderDetail));
		$this->assertArrayHasKey(0, $response->Response->SearchOrderDetails->SearchOrderDetail);
		$this->assertObjectHasAttribute('OrderID', $response->Response->SearchOrderDetails->SearchOrderDetail[0]);
		$this->assertObjectHasAttribute('OrderKind', $response->Response->SearchOrderDetails->SearchOrderDetail[0]);
		$this->assertObjectHasAttribute('OrderStatus', $response->Response->SearchOrderDetails->SearchOrderDetail[0]);
		$this->assertObjectHasAttribute('FQDN', $response->Response->SearchOrderDetails->SearchOrderDetail[0]);
		$this->assertTrue($response->Response->SearchOrderDetails->SearchOrderDetail[0]->OrderStatus == '3');
	}

	/**
	 * @covers GlobalSign::ValidateOrderParameters
	 * @todo   Implement testValidateOrderParameters().
	 */
	public function testValidateOrderParameters() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::create_alphassl
	 * @todo   Implement testCreate_alphassl().
	 */
	public function testCreate_alphassl() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::create_domainssl
	 * @todo   Implement testCreate_domainssl().
	 */
	public function testCreate_domainssl() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::create_domainssl_autocsr
	 * @todo   Implement testCreate_domainssl_autocsr().
	 */
	public function testCreate_domainssl_autocsr() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::create_organizationssl
	 * @todo   Implement testCreate_organizationssl().
	 */
	public function testCreate_organizationssl() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::create_organizationssl_autocsr
	 * @todo   Implement testCreate_organizationssl_autocsr().
	 */
	public function testCreate_organizationssl_autocsr() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::create_extendedssl
	 * @todo   Implement testCreate_extendedssl().
	 */
	public function testCreate_extendedssl() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::DVOrder
	 * @todo   Implement testDVOrder().
	 */
	public function testDVOrder() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::OVOrder
	 * @todo   Implement testOVOrder().
	 */
	public function testOVOrder() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::OVOrderWithoutCSR
	 * @todo   Implement testOVOrderWithoutCSR().
	 */
	public function testOVOrderWithoutCSR() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::EVOrder
	 * @todo   Implement testEVOrder().
	 */
	public function testEVOrder() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::GetDVApproverList
	 * @todo   Implement testGetDVApproverList().
	 */
	public function testGetDVApproverList() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::ResendEmail
	 * @todo   Implement testResendEmail().
	 */
	public function testResendEmail() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::ChangeApproverEmail
	 * @todo   Implement testChangeApproverEmail().
	 */
	public function testChangeApproverEmail() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::renewValidateOrderParameters
	 * @todo   Implement testRenewValidateOrderParameters().
	 */
	public function testRenewValidateOrderParameters() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::renewAlphaDomain
	 * @todo   Implement testRenewAlphaDomain().
	 */
	public function testRenewAlphaDomain() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::renewDVOrder
	 * @todo   Implement testRenewDVOrder().
	 */
	public function testRenewDVOrder() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::renewOVOrder
	 * @todo   Implement testRenewOVOrder().
	 */
	public function testRenewOVOrder() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::renewOrganizationSSL
	 * @todo   Implement testRenewOrganizationSSL().
	 */
	public function testRenewOrganizationSSL() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::renewEVOrder
	 * @todo   Implement testRenewEVOrder().
	 */
	public function testRenewEVOrder() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::renewExtendedSSL
	 * @todo   Implement testRenewExtendedSSL().
	 */
	public function testRenewExtendedSSL() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::ReIssue
	 * @todo   Implement testReIssue().
	 */
	public function testReIssue() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @covers GlobalSign::DVOrderWithoutCSR
	 * @todo   Implement testDVOrderWithoutCSR().
	 */
	public function testDVOrderWithoutCSR() {
		$this->markTestIncomplete('This test has not been implemented yet.');
	}
}
